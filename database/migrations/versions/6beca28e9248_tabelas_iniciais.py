"""tabelas iniciais

Revision ID: 6beca28e9248
Revises: 
Create Date: 2025-04-26 02:08:20.939914

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '6beca28e9248'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('unq_email_empresa_usuario', table_name='usuarios')
    op.drop_table('usuarios', cascade=True)
    op.drop_table('listas_perguntas', cascade=True)
    op.drop_table('compromissos', cascade=True)
    op.drop_table('empresas', cascade=True)
    op.drop_table('vetores', cascade=True)
    op.drop_index('idx_pergunta_text', table_name='perguntas_respostas', postgresql_using='gin')
    op.drop_index('idx_resposta_text', table_name='perguntas_respostas', postgresql_using='gin')
    op.drop_table('perguntas_respostas', cascade=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('perguntas_respostas',
    sa.Column('id_pergunta', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('id_lista', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('pergunta', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('resposta', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('data_cadastro', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['id_lista'], ['listas_perguntas.id_lista'], name='perguntas_respostas_id_lista_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id_pergunta', name='perguntas_respostas_pkey')
    )
    op.create_index('idx_resposta_text', 'perguntas_respostas', [sa.literal_column("to_tsvector('portuguese'::regconfig, resposta)")], unique=False, postgresql_using='gin')
    op.create_index('idx_pergunta_text', 'perguntas_respostas', [sa.literal_column("to_tsvector('portuguese'::regconfig, pergunta)")], unique=False, postgresql_using='gin')
    op.create_table('vetores',
    sa.Column('id_vetor', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('id_lista', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('vetor', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('data_geracao', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('ativo', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['id_lista'], ['listas_perguntas.id_lista'], name='vetores_id_lista_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id_vetor', name='vetores_pkey')
    )
    op.create_table('empresas',
    sa.Column('id_empresa', sa.INTEGER(), server_default=sa.text("nextval('empresas_id_empresa_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('nome', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('cnpj', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('email_contato', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('telefone', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('data_cadastro', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id_empresa', name='empresas_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('compromissos',
    sa.Column('id_compromisso', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('id_empresa', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('titulo', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('descricao', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('data_inicio', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('data_fim', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('arquivo_ics', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('criado_em', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['id_empresa'], ['empresas.id_empresa'], name='compromissos_id_empresa_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id_compromisso', name='compromissos_pkey')
    )
    op.create_table('listas_perguntas',
    sa.Column('id_lista', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('id_empresa', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('nome_lista', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('descricao', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('data_criacao', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['id_empresa'], ['empresas.id_empresa'], name='listas_perguntas_id_empresa_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id_lista', name='listas_perguntas_pkey')
    )
    op.create_table('usuarios',
    sa.Column('id_usuario', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('id_empresa', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('nome', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('senha_hash', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('tipo_usuario', sa.VARCHAR(length=20), server_default=sa.text("'comum'::character varying"), autoincrement=False, nullable=True),
    sa.Column('ativo', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('data_cadastro', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['id_empresa'], ['empresas.id_empresa'], name='usuarios_id_empresa_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id_usuario', name='usuarios_pkey'),
    sa.UniqueConstraint('email', name='usuarios_email_key')
    )
    op.create_index('unq_email_empresa_usuario', 'usuarios', ['email', 'id_empresa'], unique=True)
    # ### end Alembic commands ###
